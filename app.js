var fs 			 = require('fs');var express  = require('express');var app 		 = express();var http 		 = require('http');var server 	 = http.createServer(app);var io 			 = require('socket.io').listen(server);var assert =  require('assert');var Passwords = require('machinepack-passwords');var mysql = require('mysql'); var connection = mysql.createConnection(    {      host     : 'localhost',      user     : 'root',      password : 'root',      port     : 8889,      database : 'nursecare',    }); connection.connect(); app.use(express.static(__dirname + '/public'));app.get('/socket.io/socket.io.js', function (req, res){		res.sendfile(__dirname + 			 			'/node_modules/socket.io/node_modules/socket.io-client/dist/socket.io.js');});io.on('connection', function(socket){  //console.log('a user connected from socke app');  socket.on('disconnect', function(){   // socket.emit('clientlost',{client:'connectionlost' , disconect:true});    console.log('user disconnected');   /*    var queryString = 'SELECT * FROM patient';         connection.query(queryString, function(err, rows, fields) {    if (err) throw err;     for (var i in rows) {        //console.log();       }    }); */    //connection.end();  });/*  socket.on('Pass',function(data){var Passwords = require('machinepack-passwords');          // Encrypt a string using the BCrypt algorithm.          Passwords.encryptPassword({          password: data.Passwords,          }).exec({          // An unexpected error occurred.          error: function (err){           console.log(err);          },          // OK.          success: function (result){           //console.log('client'+result);           socket.emit('cryptedPassword' , {resp:result});           console.log(result);          },          });  });*/   socket.on('encrypPassword', function(data){          // Compare a plaintext password attempt against an already-encrypted version.          Passwords.checkPassword({          passwordAttempt: data.password,          encryptedPassword: data.encryptedPassword,          }).exec({          // An unexpected error occurred.          error: function (err){           console.log('issue occured');           socket.emit('decryptedPassword' , {message: "issue occured", result:false});          },          // Password attempt does not match already-encrypted version          incorrect: function (){           console.log('password not correct');           socket.emit('decryptedPassword' , {message: "password not correct",result:false});                 },          // OK.          success: function (){          console.log('your are logged in');            socket.emit('decryptedPassword' , {message: "decripted",result:true});                 },        });     });  socket.on('getinputs', function(data){   console.log(data);  });  socket.on('conected', function(data){  	socket.emit('responsedTonewconnected' , {message: "welcome"+ data.origine});  });    socket.on('abroad', function(data){    console.log(data.origine);  })});server.listen(3000, function() {	console.log("server starting on port 3000");});